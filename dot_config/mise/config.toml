[tools]
node = 'lts'
python = '3.12'
rust = 'stable'
go = 'latest'
"go:github.com/mitranim/gow" = "latest"
ruby = "3.4.1"
#terraform = 'latest'
#terraform-docs = 'latest'

[settings]
# plugins can read the versions files used by other version managers (if enabled by the plugin)
# for example, .nvmrc in the case of node's nvm
legacy_version_file = true # enabled by default (unlike asdf)
# legacy_version_file_disable_tools = ['python'] # disable for specific tools

# configure `mise install` to always keep the downloaded archive
always_keep_download = false # deleted after install by default
always_keep_install = false  # deleted on failure by default

# configure how frequently (in minutes) to fetch updated plugin repository changes
# this is updated whenever a new runtime is installed
# (note: this isn't currently implemented but there are plans to add it: https://github.com/jdx/mise/issues/128)
plugin_autoupdate_last_check_duration = '1 week' # set to 0 to disable updates

# config files with these prefixes will be trusted by default
trusted_config_paths = ['~/work/']

verbose = false      # set to true to see full installation output, see `MISE_VERBOSE`
asdf_compat = false  # set to true to ensure .tool-versions will be compatible with asdf, see `MISE_ASDF_COMPAT`
http_timeout = "30s" # set the timeout for http requests in seconds, see `MISE_HTTP_TIMEOUT`
jobs = 8             # number of plugins or runtimes to install in parallel. The default is `4`.
raw = false          # set to true to directly pipe plugins to stdin/stdout/stderr
yes = false          # set to true to automatically answer yes to all prompts

not_found_auto_install = true # see MISE_NOT_FOUND_AUTO_INSTALL
# task_output = "prefix"        # see Tasks Runner for more information
# paranoid = false              # see MISE_PARANOID

# shorthands_file = '~/.config/mise/shorthands.toml' # path to the shorthands file, see `MISE_SHORTHANDS_FILE`
# disable_default_shorthands = false # disable the default shorthands, see `MISE_DISABLE_DEFAULT_SHORTHANDS`
# disable_tools = ['node']           # disable specific tools, generally used to turn off core tools

experimental = true # enable experimental features